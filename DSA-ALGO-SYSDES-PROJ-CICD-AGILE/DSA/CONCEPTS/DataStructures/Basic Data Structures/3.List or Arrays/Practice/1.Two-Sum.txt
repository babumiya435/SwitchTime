Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
--------------------------------------------------------------------------


/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
    let n = nums.length;
    let l = 0, r = n-1;
    let sum = 0;
    // brute force way O(n2) S(1)
    // for (i = 0; i < n; i++){
    //     for(j = i+1; j < n; j++){
    //         if(nums[i] + nums[j] === target){
    //             return [i,j];
    //         }
    //     }
    // }
    // for sorted array = two pointer methode works O(n) S(1)
    // while(l < r){
    //     sum = nums[l] + nums[r]
    //     if(sum === target){
    //         return [l,r];
    //     }
    //      if (sum < target){
    //         l = l+1
    //     } else {
    //         r = r-1
    //     }
    // }
    // hash map aproached O(n) S(n)
    let map = new Map();
    for(i = 0; i < n; i++){
        if(map.has(target - nums[i])){
            return [map.get(target - nums[i]), i];
        }else{
            map.set(nums[i],i);
        }
    }
};